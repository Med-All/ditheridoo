#!/usr/bin/env python3


"""
MegaPixel - multicolor bitmap editor for Commodore 64
Copyright (C) 2020 fieserWolF / Abyss-Connection

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.

For futher questions, please contact me at
http://csdb.dk/scener/?id=3623
or
wolf@abyss-connection.de

For Python3, The Python Imaging Library (PIL), Numpy, Tcl/Tk and other used source licenses see file "LICENSE_OTHERS".
"""

def _global_graphics():
        return None

icon_graphic = """
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
TQUd0QAAAABJRU5ErkJggg==
"""

logo_graphic = """
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
"""



about_graphic = """
R0lGODdhZABkAOf/ACMjNywoNi8nOiYqOCwrPzgvQzYxQDMzOzE0QzQzRzc5Niw8RzI5VS8+SC0/
Tj06UTg8TTs9OkE6STk9RC1BRTFASjs/UDNCTDVCRzBDUjhFSjRGVTZGUDJIUURCVz5EWEhCUUFF
UkJGSERGRDZJWDxJTkdGTzBKgj9LUTVLdjpMWzROXD5KaEZKTEJKXEhKRz5MV0pJUkVKa09JWDlP
ZD1PX0dNVFFKVUlNT0tNSkJPVUtNWjhSc1FMY0VSWEBTYk1RUz5UaEVTXjtVbkxSWVBST0pUVU9T
VU5TZVFWWEBZczhaiFRWVD1bbkRZbkdZaVFXXkpZZDFehkxZXzxal0NcdkhZiEZbfDlco05ZfFFa
ZlxXZ1haV1lZYltYbVVbYldbXUBfhFFbeFhadkZgeltdWkRhgFpeYD5kgkthdltda1BgcFRgbEpj
fV9hXk1mgUNph0pnhkZpp0tqj2RmY01qilpmj2VlgEBvmWlle1VpmlZqjE5smWJnjGNofVFujlNu
iElxj09vlGpsaUB5lVd0j0x0vFd0lFF2lVV0plB2ol5zm054nFRzxG9yb1h1oXJwhld1rlZ3nHVw
klF6sUl+qnB0klZ7p3V3dHR2hVN9rm92nFl9nGV6nF97qFx8rmp6k3l7eFyCrliDtFiGqmKCtViE
yH1/fGeCr1uD0l6EvVSHwGWCwXKAsmCIp36AnW+EpmeIrnyCqFmMumGKvIOFgmWKtnaGsF2O1GSQ
xWCRzmKUvWaR3HSOz4yOi2KWyFyavHCVtXGUvoKPu4SPtYWQrWmXzneUyXqUvmib4mub2pOVkneb
x2+gx3md126i15udmmip0Xao0Xyl8qKkoXWw4YGu56irp3i324Wy+IO44K6wrX682LO2soPD4ITC
94XE6ri6t7u9uo3P7pPS6cfJxpnb65ne+NDSz5/m/drc2ans/LTq/6fw+OHj4LTz/af6/7D4/637
/Kj//rH+6q/9/qv/+K7/8bP++Lj8/7H//7L//7f/8+7x7ff59v///ywAAAAAZABkAAAI/gD1CZRH
kGC9ggYPClyor55DhvUaRmQ4j6E9ewPxYWTIsaPAfCBD5vNIcuFDffMqCnR4UF7LgiwnmjwJUSbK
ixf1EdSXD59PkCU9igwZlOTJlBxZSmS502XRlTZx2sNXL57VeD3x8XxqkyfQpx6PqpzZ9WBEp1y7
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
DIGIAAIGDBM6OYoc9OExY0AAOw==
"""

import os
import sys
import struct
from PIL import ImageTk
import PIL.Image as PilImage    #we need another name, as it collides with tk.Image otherwise
import PIL.ImageDraw as ImageDraw
import tkinter as tk
from tkinter.filedialog import askopenfilename, asksaveasfilename
#import json
import platform

#global constants
def _global_constants():
        return None
PROGNAME = 'MegaPixel';
VERSION = '1.0';
DATUM = '20.12.2020';

#BGCOLOR="#ff0000"
BGCOLOR="#d9d9d9"
ACTIVECOLOR="#e8e8e8"   #mouse hovering over button
SELECTCOLOR="#ffffff"   #button pressed
TEXTBOXCOLOR="#ffffff"

C64_CHAR_HEIGHT=25  #200/8
C64_CHAR_WIDTH=40   #320/8

BITMAP_PIXEL_X  = 4
BITMAP_PIXEL_Y  = 8

PALETTEDATA_COLODORE = (
    0,   0,   0,	#0
    255, 255, 255,	#1
    129,  51, 56,	#2
    117, 206, 200,	#3
    142,  60, 151,	#4
    86, 172,  77,	#5
    46,  44, 155,	#6
    237, 241, 113,	#7
    142,  80,  41,	#8
    85,  56,   0,	#9
    196, 108, 113,	#10
    74,  74,  74,	#11
    123, 123, 123,	#12
    169, 255, 159,	#13
    112, 109, 235,	#14
    178, 178, 178	#15
)

PALETTEDATA_PEPTO = (
    0, 0, 0,		# 0 black
    255, 255, 255,	# 1 white
    104, 55, 43,	# 2 red
    112, 164, 178,	# 3 cyan
    111,  61, 134,	# 4 purple
     88, 141,  67,	# 5 green
     53,  40, 121,	# 6 blue
    184, 199, 111,	# 7 yellow
    111,  79,  37,	# 8 orange
     67,  57,   0,	# 9 brown
    154, 103,  89,	# a pink
     68,  68,  68,	# b dark gray
    108, 108, 108,	# c gray
    154, 210, 132,	# d light green
    108,  94, 181,	# e light blue
    149, 149, 149	# f light gray
)

_bd = 2
_padx = 2
_pady = 2

KOALA_WIDTH = 160
KOALA_HEIGHT = 200


EDITORSIZE_TEXT    = (
    "640x400",  #0 640x400
    "1280x800"  #1 1280x800
)

EDITORSIZE_MULTIPLY    = (
    2,  #0 640x400
    4   #1 1280x800
)

EDITORSIZE_DIV_X  = (
    2,  #0 640x400
    1   #1 1280x800
)
EDITORSIZE_DIV_Y  = (
    4,  #0 640x400
    2   #1 1280x800
)

PREVIEWSIZE_DIV_X  = (
    4,  #0 320x200
    2,  #1 640x400
)
PREVIEWSIZE_DIV_Y  = (
    8,  #0 320x200
    4,  #1 640x400
)


ZOOM_MULTIPLY    = (
    1,  #0
    2,  #1
    4,  #2
    8,   #3
    16   #4
)

ZOOM_WIDTH = (
    320,    #0
    160,    #1
    80,     #2
    40,     #3
    20      #4
)
ZOOM_HEIGHT = (
    400,    #0
    200,    #1
    100,    #2
    50,     #3
    25      #4
)


GRID_SIZE = (
    4,  #0
    8, #1
    16, #2
    32, #3
    64 #4
)

PREVIEWSIZE_MULTIPLY    = (
    1,  #0 320x200
    2  #1 640x400
)

PREVIEWSIZE_TEXT    = (
    "320x200",  #0 320x200
    "640x400"  #1 640x400
)


#https://anzeljg.github.io/rin2/book2/2405/docs/tkinter/cursors.html
CURSOR_HAND = 'hand2'
CURSOR_EDIT = 'arrow'
CURSOR_NOTHING = 'circle'
CURSOR_MOVE = 'fleur'
CURSOR_MARKER_START = 'top_left_corner'
CURSOR_MARKER_END = 'bottom_right_corner'



#global variables
def _global_variables():
        return None
        
root = tk.Tk()

preview_window = None
preview_window_open = False

frame_replace_color = tk.Frame()


editor_mode = 'edit'

operating_system = platform.system()

koala_bitmap=[0]*8000
koala_col12=[0]*1000
koala_col3=[0]*1000
koala_bg=0

buffer_bitmap=[0]*8000
buffer_col12=[0]*1000
buffer_col3=[0]*1000
marker_posx=0
marker_posy=0
marker_width=0
marker_height=0

buffer_posx = 0
buffer_posy = 0
buffer_width = 0
buffer_height = 0

koala_colorindex_data = [0] * KOALA_WIDTH*KOALA_HEIGHT

user_palette = tk.StringVar()
user_palette.set("pepto")   #default palette

user_drawmode = tk.StringVar()
#user_drawmode.set("keep")
#user_drawmode.set("dye")
user_drawmode.set("replace")
#user_drawmode.set("select")

user_pencil = tk.StringVar()
user_pencil.set("normal")


user_editorsize = tk.IntVar()
user_editorsize.set(0)  #default editorsize
editor_width   = KOALA_WIDTH*2 *EDITORSIZE_MULTIPLY[user_editorsize.get()]
editor_height  = KOALA_HEIGHT *EDITORSIZE_MULTIPLY[user_editorsize.get()]

user_previewsize = tk.IntVar()
user_previewsize.set(0)  #default previewsize
preview_width   = KOALA_WIDTH*2 *PREVIEWSIZE_MULTIPLY[user_previewsize.get()]
preview_height  = KOALA_HEIGHT *PREVIEWSIZE_MULTIPLY[user_previewsize.get()]



current_filename = ""

user_start_address = tk.StringVar()
user_start_address.set("6000")
user_start_address_checkbutton = tk.IntVar()
user_start_address_checkbutton.set(1)

user_drawcolor_left = tk.IntVar()
user_drawcolor_left.set(0)
user_drawcolor_right = tk.IntVar()
user_drawcolor_right.set(1)

used_color_bg = tk.IntVar()
used_color_bg.set(1)
used_color_col1 = tk.IntVar()
used_color_col1.set(1)
used_color_col2 = tk.IntVar()
used_color_col2.set(1)
used_color_col3 = tk.IntVar()
used_color_col3.set(1)

user_replace_color = tk.IntVar()
user_replace_color.set(99)

current_color = tk.IntVar()
current_color.set(99)



cursorx_variable = tk.IntVar()
cursorx_variable.set(0)
cursory_variable = tk.IntVar()
cursory_variable.set(0)

blockx_variable = tk.IntVar()
blockx_variable.set(0)
blocky_variable = tk.IntVar()
blocky_variable.set(0)

editorimage_posx_variable = tk.IntVar()
editorimage_posx_variable.set(0)
editorimage_posy_variable = tk.IntVar()
editorimage_posy_variable.set(0)


mousex_variable = tk.IntVar()
mousex_variable.set(0)
mousey_variable = tk.IntVar()
mousey_variable.set(0)

undo_variable = tk.IntVar()
undo_variable.set(0)



koala_image = PilImage.new("P", (KOALA_WIDTH,KOALA_HEIGHT))
marker_image = PilImage.new("P", (KOALA_WIDTH,KOALA_HEIGHT))
editor_image = PilImage.new("P", (editor_width, editor_height))
background_image = PilImage.new("RGBA", (editor_width, editor_height))
preview_image = PilImage.new("P", (preview_width, preview_height))
grid1_image = PilImage.new("RGBA", (editor_width, editor_height))
grid2_image = PilImage.new("RGBA", (editor_width, editor_height))
grid3_image = PilImage.new("RGBA", (editor_width, editor_height))
grid4_image = PilImage.new("RGBA", (editor_width, editor_height))

label_editor_image = tk.Label()
label_preview_image = tk.Label()

mouse_posx  = 0
mouse_posy  = 0

zoom_preview    = 1
zoom    = 1
my_focus = "unset"

space_pressed   = False

editorimage_posx    = 0
editorimage_posy    = 0

my_prv_posx = 0
my_prv_posy = 0

block_x = 0
block_y = 0
block_x_absolute = 0
block_y_absolute = 0

radiobutton_replace_bg = tk.Radiobutton()
radiobutton_replace_col1 = tk.Radiobutton()
radiobutton_replace_col2 = tk.Radiobutton()
radiobutton_replace_col3 = tk.Radiobutton()

radiobutton_current_bg = tk.Radiobutton()
radiobutton_current_col1 = tk.Radiobutton()
radiobutton_current_col2 = tk.Radiobutton()
radiobutton_current_col3 = tk.Radiobutton()

undo_stack = []



def draw_background():
    global background_image

    background_image = PilImage.new("RGBA", (editor_width, editor_height), "#888888ff")
    draw = ImageDraw.Draw(background_image)

    CHECKER_SIZE = 32

    a = 0
    for y in range(0,editor_height,CHECKER_SIZE) :
        for x in range(0,editor_width,CHECKER_SIZE) :
            if ( a%2 == 0) :
                #https://pillow.readthedocs.io/en/stable/reference/ImageDraw.html#PIL.ImageDraw.ImageDraw.rectangle
                draw.rectangle( ( (x,y) , (x+CHECKER_SIZE-1,y+CHECKER_SIZE-1) ), fill="#777777ff")
            a += 1
        a += 1


    
    
    
def draw_grids():
    global draw1, draw2, draw3, draw4
    global grid1_image, grid2_image, grid3_image, grid4_image

    grid1_image = PilImage.new("RGBA", (editor_width, editor_height))
    grid2_image = PilImage.new("RGBA", (editor_width, editor_height))
    grid3_image = PilImage.new("RGBA", (editor_width, editor_height))
    grid4_image = PilImage.new("RGBA", (editor_width, editor_height))

    draw1 = ImageDraw.Draw(grid1_image, 'RGBA')
    draw2 = ImageDraw.Draw(grid2_image, 'RGBA')
    draw3 = ImageDraw.Draw(grid3_image, 'RGBA')
    draw4 = ImageDraw.Draw(grid4_image, 'RGBA')

    multi = EDITORSIZE_MULTIPLY[user_editorsize.get()]

    #y-axis
    for y in range(0,editor_height,(GRID_SIZE[1] * multi)) : draw1.line((0,y,editor_width,y), fill="#88888888")
    for y in range(0,editor_height,(GRID_SIZE[2] * multi)) : draw2.line((0,y,editor_width,y), fill="#88888888")
    for y in range(0,editor_height,(GRID_SIZE[3] * multi)) : draw3.line((0,y,editor_width,y), fill="#88888888")
    for y in range(0,editor_height,(GRID_SIZE[4] * multi)) : draw4.line((0,y,editor_width,y), fill="#88888888")

    #x-axis
    for x in range(0,editor_width,(GRID_SIZE[1] * multi)) : draw1.line((x,0,x,editor_height), fill="#88888888")
    for x in range(0,editor_width,(GRID_SIZE[2] * multi)) : draw2.line((x,0,x,editor_height), fill="#88888888")
    for x in range(0,editor_width,(GRID_SIZE[3] * multi)) : draw3.line((x,0,x,editor_height), fill="#88888888")
    for x in range(0,editor_width,(GRID_SIZE[4] * multi)) : draw4.line((x,0,x,editor_height), fill="#88888888")





    
    
def action_image_refresh_prepare():
        global koala_image

        switcher_palette = {
            'pepto': PALETTEDATA_PEPTO,
            'colodore': PALETTEDATA_COLODORE,
        }
        my_palettedata = switcher_palette.get(user_palette.get(), PALETTEDATA_PEPTO)
        koala_image.putpalette(my_palettedata)

        koala_image.putdata(koala_colorindex_data)

        action_image_refresh_show()

        return None
        

def editorimage_pos_sanity_check() :
        global editorimage_posx, editorimage_posy
        
        #sanity checks
        if (editorimage_posx < C64_CHAR_WIDTH*-1+1) : editorimage_posx = C64_CHAR_WIDTH*-1+1
        if (editorimage_posy < C64_CHAR_HEIGHT*-1+1) : editorimage_posy = C64_CHAR_HEIGHT*-1+1
        if (editorimage_posx > C64_CHAR_WIDTH-1) : editorimage_posx = C64_CHAR_WIDTH-1
        if (editorimage_posy > C64_CHAR_HEIGHT-1) : editorimage_posy = C64_CHAR_HEIGHT-1
        
        #zoom
        if (
            (zoom==0) |
            (zoom==1)
        ) :
            editorimage_posx = 0
            editorimage_posy = 0
        
        
def action_image_refresh_show():
        #copy, move and zoom: koala_image to editor_image
        global editor_width, editor_height
        global editor_image
        global label_editor_image, label_preview_image
        global marker_image

        #draw marker
        marker_image = koala_image.copy()
        if ((marker_height > 0) & (marker_width > 0) ) :
            startx = (marker_posx)*4
            starty = (marker_posy)*8
            endx = (marker_posx+marker_width+1)*4
            endy = (marker_posy+marker_height+1)*8
            for x in range(startx,endx) :
                marker_image.putpixel((x,starty),4)
                marker_image.putpixel((x,endy-1),4)
            for y in range(starty+1,endy-1) :
                marker_image.putpixel((startx,y),4)
                marker_image.putpixel((endx-1,y),4)

        # update dimensions
        editor_width_old = editor_width
        editor_width   = KOALA_WIDTH*2 * EDITORSIZE_MULTIPLY[user_editorsize.get()]
        editor_height  = KOALA_HEIGHT * EDITORSIZE_MULTIPLY[user_editorsize.get()]
        if (editor_width != editor_width_old) :
            draw_grids()
            draw_background()

        editor_image = background_image.copy()

        editorimage_pos_sanity_check()

        scale_startx = 0
        scale_starty = 0
        scale_endx = C64_CHAR_WIDTH
        scale_endy = C64_CHAR_HEIGHT
        box_startx = editorimage_posx
        box_starty = editorimage_posy
        box_endx = editorimage_posx+C64_CHAR_WIDTH
        box_endy = editorimage_posy+C64_CHAR_HEIGHT

       
        if (box_startx < 0) :
            scale_startx = abs(box_startx)
            scale_endx = C64_CHAR_WIDTH - scale_startx
            box_endx = C64_CHAR_WIDTH - scale_startx
            box_startx = 0
        if (box_starty < 0) :
            scale_starty = abs(box_starty)
            scale_endy = C64_CHAR_HEIGHT - scale_starty
            box_endy = C64_CHAR_HEIGHT - scale_starty
            box_starty = 0
            
        if (box_endx > C64_CHAR_WIDTH) :
            scale_endx = C64_CHAR_WIDTH - box_startx
            box_endx = C64_CHAR_WIDTH
        if (box_endy > C64_CHAR_HEIGHT) :
            scale_endy = C64_CHAR_HEIGHT - box_starty
            box_endy = C64_CHAR_HEIGHT



        #copy, crop and resize
        box = (
            int(box_startx*BITMAP_PIXEL_X),
            int(box_starty*BITMAP_PIXEL_Y),
            int(box_endx*BITMAP_PIXEL_X),
            int(box_endy*BITMAP_PIXEL_Y)
        )

        editor_multi = 4 * EDITORSIZE_MULTIPLY[user_editorsize.get()] * ZOOM_MULTIPLY[zoom]
        my_width   = scale_endx * editor_multi
        my_height  = scale_endy * editor_multi
        scale_startx = scale_startx * editor_multi
        scale_starty = scale_starty * editor_multi

        editor_image.paste( marker_image.crop(box).resize((my_width,my_height)).convert("RGB") , (scale_startx, scale_starty) )
        
        #add grid
        if (zoom==1) : editor_image.paste(grid1_image, (0,0), grid1_image)
        if (zoom==2) : editor_image.paste(grid2_image, (0,0), grid2_image)
        if (zoom==3) : editor_image.paste(grid3_image, (0,0), grid3_image)
        if (zoom==4) : editor_image.paste(grid4_image, (0,0), grid4_image)
        
        #copy to label_edit_image
        image_koalaTk = ImageTk.PhotoImage(editor_image)
        label_editor_image.configure(image=image_koalaTk)
        label_editor_image.image = image_koalaTk # keep a reference!

        #prepare preview image
        preview_width   = KOALA_WIDTH * 2 * PREVIEWSIZE_MULTIPLY[user_previewsize.get()]
        preview_height  = KOALA_HEIGHT * 1 * PREVIEWSIZE_MULTIPLY[user_previewsize.get()]
        preview2_image = koala_image.resize((preview_width,preview_height)).convert("RGB")

        #copy to label_preview_image
        if ( preview_window_open == True ) :
            image2_koalaTk = ImageTk.PhotoImage(preview2_image)
            label_preview_image.configure(image=image2_koalaTk)
            label_preview_image.image = image2_koalaTk # keep a reference!







def koala_index_to_colorindex(
    index,  #0..3
    x,
    y
) :
    location = (y*C64_CHAR_WIDTH)+x
        
    switcher = {
        0 : koala_bg,    #=koala_bg;	// pixel not set = $d021 colour
        1 : koala_col12[location] >> 4,   #=koala_col12[(y*C64_CHAR_WIDTH)+x] SHR 4;
        2 : koala_col12[location] & 0b00001111,    #=koala_col12[(y*C64_CHAR_WIDTH)+x] and %00001111;
        3 : koala_col3[location] & 0b00001111    #=koala_col3[(y*C64_CHAR_WIDTH)+x] and %00001111;
    }
    return switcher.get(index,0)





def koala_to_image_single_block(x,y) :
    global koala_colorindex_data

    SHR_PRE = [
        6,
        4,
        2,
        0
    ]

    pos = ((y*C64_CHAR_WIDTH)+x)*8
    this_block = koala_bitmap[ pos:pos+8]   #this_block holds 8 bytes

    for row in range(0, 8):
        this_row = this_block[row]
        
        for column in range(0, 4):
            iy = y*8    +row
            ix = x*4    +column

            #normal data
            koalaindex = (this_row >> SHR_PRE[column]) & 0b00000011 #result should be 0..3
            koala_colorindex_data[iy*KOALA_WIDTH+ix] = koala_index_to_colorindex(koalaindex,x,y)




def koala_to_image(
):
    for y in range(0, C64_CHAR_HEIGHT):
        for x in range(0, C64_CHAR_WIDTH):
            koala_to_image_single_block(x,y)

    return None





def load_koala(
    filename_in
) :
    """
    loads and parses a koala file for debugging the koala_to_image conversion
    * reads: filename
    * sets: koala_bitmap, koala_col12, koala_col3 and koala_bg
    """
    global koala_bitmap
    global koala_col12
    global koala_col3
    global koala_bg
    
#load a koala
    print ("Opening koala \"%s\"..." % filename_in)
    file_in = open(filename_in , "rb")
    # read file into buffer
    buffer=[]
    while True:
        data = file_in.read(1)  #read 1 byte
        if not data: break
        temp = struct.unpack('B',data)
        buffer.append(temp[0])
    file_in.close()

#parse koala
    koala_bitmap    = buffer[2                  :2+8000]
    koala_col12     = buffer[2+8000             :2+8000+1000]
    koala_col3      = buffer[2+8000+1000        :2+8000+1000+1000]
    koala_bg        = buffer[2+8000+1000+1000   :2+8000+1000+1000+1][0]

    koala_to_image()
  
    return None


    

def update_infos_preview():
    global editorimage_posx, editorimage_posy
    global block_x, block_y
    
    factor_x = GRID_SIZE[zoom_preview]/PREVIEWSIZE_DIV_X[user_previewsize.get()]
    factor_y = GRID_SIZE[zoom_preview]/PREVIEWSIZE_DIV_Y[user_previewsize.get()]
    
    cursorx = int(mouse_posx/factor_x)
    cursory = int(mouse_posy/factor_y)
    
    #sanity checks:
    if (cursorx <0 ) : cursorx = 0
    if (cursory <0 ) : cursory = 0
    if (cursorx >159 ) : cursorx = 159
    if (cursory >199 ) : cursory = 199
        
    block_x = int(cursorx/BITMAP_PIXEL_X)
    block_y = int(cursory/BITMAP_PIXEL_Y)


    cursorx_variable.set(cursorx)
    cursory_variable.set(cursory)
    blockx_variable.set(block_x)
    blocky_variable.set(block_y)
    editorimage_posx_variable.set(editorimage_posx)
    editorimage_posy_variable.set(editorimage_posy)
    mousex_variable.set(mouse_posx)
    mousey_variable.set(mouse_posy)
    
    #print("preview cursorx=",cursorx," cursory=",cursory)
    #print("preview block_x=",block_x," block_y=",block_y, "editorimage_posx=",editorimage_posx," editorimage_posy=",editorimage_posy)





def update_infos():
    global cursorx_variable, cursory_variable
    global blockx_variable, blocky_variable
    global editorimage_posx_variable, editorimage_posy_variable
    global mousex_variable, mousey_variable
    global used_color_bg, used_color_col1, used_color_col2, used_color_col3
    global editorimage_posx, editorimage_posy
    global block_x, block_y
    global radiobutton_replace_bg, radiobutton_replace_col1, radiobutton_replace_col2, radiobutton_replace_col3
    global radiobutton_current_bg, radiobutton_current_col1, radiobutton_current_col2, radiobutton_current_col3
    global undo_variable

    undo_variable.set(len(undo_stack))

    factor_x = GRID_SIZE[zoom]/EDITORSIZE_DIV_X[user_editorsize.get()]
    factor_y = GRID_SIZE[zoom]/EDITORSIZE_DIV_Y[user_editorsize.get()]

    #https://docs.python.org/3/library/platform.html
    #platform.system() : 'Linux', 'Darwin', 'Java', 'Windows'
    if (operating_system == 'Darwin') :
        adjustx=-4
        adjusty=-6
    else:
        adjustx=-2
        adjusty=-2

    
    cursorx = int( ((mouse_posx+adjustx)/factor_x) + (editorimage_posx*BITMAP_PIXEL_X) )
    cursory = int( ((mouse_posy+adjusty)/factor_y) + (editorimage_posy*BITMAP_PIXEL_Y) )
    
    #sanity checks:
    if (cursorx <0 ) : cursorx = 0
    if (cursory <0 ) : cursory = 0
    if (cursorx >159 ) : cursorx = 159
    if (cursory >199 ) : cursory = 199
        
    block_x = int(cursorx/BITMAP_PIXEL_X)
    block_y = int(cursory/BITMAP_PIXEL_Y)

    cursorx_variable.set(cursorx)
    cursory_variable.set(cursory)
    blockx_variable.set(block_x)
    blocky_variable.set(block_y)
    editorimage_posx_variable.set(editorimage_posx)
    editorimage_posy_variable.set(editorimage_posy)
    mousex_variable.set(mouse_posx)
    mousey_variable.set(mouse_posy)


    #update all color-buttons
    col_bg = koala_bg
    col1 = int(koala_col12[(block_y*40)+block_x] >> 4)
    col2 = koala_col12[(block_y*40)+block_x]& 0b00001111
    col3 = koala_col3[(block_y*40)+block_x]& 0b00001111
    
    used_color_bg.set(col_bg)
    used_color_col1.set(col1)
    used_color_col2.set(col2)
    used_color_col3.set(col3)

    mycolor = '#%02x%02x%02x' % (
        PALETTEDATA_PEPTO[col_bg*3+0],
        PALETTEDATA_PEPTO[col_bg*3+1],
        PALETTEDATA_PEPTO[col_bg*3+2]
    )
    radiobutton_replace_bg.configure(background=mycolor)
    radiobutton_replace_bg.configure(activebackground=mycolor)
    radiobutton_replace_bg.configure(selectcolor=mycolor)
    radiobutton_current_bg.configure(background=mycolor)
    radiobutton_current_bg.configure(activebackground=mycolor)
    radiobutton_current_bg.configure(selectcolor=mycolor)

    mycolor = '#%02x%02x%02x' % (
        PALETTEDATA_PEPTO[col1*3+0],
        PALETTEDATA_PEPTO[col1*3+1],
        PALETTEDATA_PEPTO[col1*3+2]
    )
    radiobutton_replace_col1.configure(background=mycolor)
    radiobutton_replace_col1.configure(activebackground=mycolor)
    radiobutton_replace_col1.configure(selectcolor=mycolor)
    radiobutton_current_col1.configure(background=mycolor)
    radiobutton_current_col1.configure(activebackground=mycolor)
    radiobutton_current_col1.configure(selectcolor=mycolor)

    mycolor = '#%02x%02x%02x' % (
        PALETTEDATA_PEPTO[col2*3+0],
        PALETTEDATA_PEPTO[col2*3+1],
        PALETTEDATA_PEPTO[col2*3+2]
    )
    radiobutton_replace_col2.configure(background=mycolor)
    radiobutton_replace_col2.configure(activebackground=mycolor)
    radiobutton_replace_col2.configure(selectcolor=mycolor)
    radiobutton_current_col2.configure(background=mycolor)
    radiobutton_current_col2.configure(activebackground=mycolor)
    radiobutton_current_col2.configure(selectcolor=mycolor)

    mycolor = '#%02x%02x%02x' % (
        PALETTEDATA_PEPTO[col3*3+0],
        PALETTEDATA_PEPTO[col3*3+1],
        PALETTEDATA_PEPTO[col3*3+2]
    )
    radiobutton_replace_col3.configure(background=mycolor)
    radiobutton_replace_col3.configure(activebackground=mycolor)
    radiobutton_replace_col3.configure(selectcolor=mycolor)
    radiobutton_current_col3.configure(background=mycolor)
    radiobutton_current_col3.configure(activebackground=mycolor)
    radiobutton_current_col3.configure(selectcolor=mycolor)
    
    my_block = block_y*C64_CHAR_WIDTH+block_x
    current_color.set(set_pixel_get_index_at_pixel(my_block, cursorx, cursory))






def input_mouse_motion_edit_window(event):
#    global label_editor_image
#    global space_pressed
    global mouse_posx, mouse_posy

    mouse_posx, mouse_posy = event.x, event.y

    update_infos()

#    label_editor_image.focus_set()
#    if (space_pressed == True) :
#        print ("move!")
#        space_pressed = False





def set_pixel_optimize_palette(my_block):
    col = []
    col.append(koala_bg)
    col.append(koala_col12[my_block] >> 4)
    col.append(koala_col12[my_block] & 0b00001111)
    col.append(koala_col3[my_block] & 0b00001111)

    palette = []
    for x in col:
        if x not in palette:
            palette.append(x)
    
    return palette




def set_pixel_replace_colors(my_block, c, color):
    global koala_bg, koala_col12, koala_col3
    # replace bg, screen or colorram

    #print("replace color: write color ",color, " to index ",c)

    if (c==0) : koala_bg = color; return None
    if (c==1) : koala_col12[my_block] = (koala_col12[my_block] & 0b00001111) + (color << 4); return None
    if (c==2) : koala_col12[my_block] = (koala_col12[my_block] & 0b11110000) + color; return None
    if (c==3) : koala_col3[my_block] = color; return None

    return None


def set_pixel_replace_bitmap(my_block,x,y,c) :
    global koala_bitmap
    #update koala bitmap data
    
    #print("replace bitmap with index=",c)

    SHIFT_LEFT = (
        6,  #0
        4,  #1
        2,  #2
        0   #3
    )

    AND_PRE = (
        0b00111111,  #0
        0b11001111,  #1
        0b11110011,  #2
        0b11111100  #3
    )
    
    bitmap_position_y = (my_block*8)+ (y & 0b00000111)
    bitmap_position_x = x & 0b00000011 #only 0-3
    koala_bitmap[bitmap_position_y] = (koala_bitmap[bitmap_position_y] & AND_PRE[bitmap_position_x]) + (c << SHIFT_LEFT[bitmap_position_x])




def set_pixel_update_preview_block (pos, old_color, color) :
    #replace all pixels with old_color with color in this block
    global koala_colorindex_data

    for y in range(0,8) :
        for x in range(0,4) :
            if (koala_colorindex_data[pos+(y*160)+x] == old_color ) :
                koala_colorindex_data[pos+(y*160)+x] = color



def set_pixel__left(posx, posy, color):
    if (user_pencil.get() == "light") :
        if ( (posy & 0b00000001) != 0) : return None
        if ( (posx & 0b00000011) != (posy & 0b00000011)) : return None
    if (user_pencil.get() == "checkerboard") :
        if ( (posx & 0b00000001) != (posy & 0b00000001)) : return None
    if (user_pencil.get() == "xline") :
        if ( (posy & 0b00000001) != 0) : return None
    if (user_pencil.get() == "yline") :
        if ( (posx & 0b00000001) != 0) : return None
    set_pixel(posx, posy, color)



def set_pixel__right(posx, posy, color):
    if (user_pencil.get() == "light") :
        if ( (posy & 0b00000001) != 0) : return None
        if ( ((posx+2) & 0b00000011) != (posy & 0b00000011)) : return None
    if (user_pencil.get() == "checkerboard") :
        if ( (posx & 0b00000001) == (posy & 0b00000001)) : return None
    if (user_pencil.get() == "xline") :
        if ( (posy & 0b00000001) == 0) : return None
    if (user_pencil.get() == "yline") :
        if ( (posx & 0b00000001) == 0) : return None
    set_pixel(posx, posy, color)



def set_pixel(posx, posy, color):
    if (user_drawmode.get() == 'dye') : set_pixel__dye_mode(posx, posy, color); return None
    if (user_drawmode.get() == 'keep') : set_pixel__keep_mode(False,posx, posy, color); return None
    if (user_drawmode.get() == 'replace') : set_pixel__keep_mode(True,posx, posy, color); return None
    if (user_drawmode.get() == 'select') : set_pixel__select_mode(posx, posy, color); return None



def set_pixel_get_best_index_for_color(my_block, color):
    #0 = background, 1=screen1, 2=screen2, 3=colorram, 99=nothing
    if (color==koala_bg) : return 0
    if (color==koala_col12[my_block] >> 4) : return 1
    if (color==koala_col12[my_block] & 0b00001111) : return 2
    if (color==koala_col3[my_block] & 0b00001111) : return 3
    return False

def set_pixel_get_color_by_index(my_block, index):
    if (index==0) : return koala_bg
    if (index==1) : return (koala_col12[my_block] >> 4)
    if (index==2) : return (koala_col12[my_block] & 0b00001111)
    if (index==3) : return (koala_col3[my_block] & 0b00001111)
    return False




def set_pixel__select_mode(posx, posy, color):
    undo_save_already_done = False
    my_block = block_y*C64_CHAR_WIDTH+block_x
    user_replace_this = user_replace_color.get()    #0 = background, 1=screen1, 2=screen2, 3=colorram, 99=nothing

    flag_new_colors = False
    flag_new_bitmap = False

    # deal with colors
    if ( user_replace_this == 99) :
        #do not overwrite anything
        replace_this = set_pixel_get_best_index_for_color(my_block, color)   #0 = background, 1=screen1, 2=screen2, 3=colorram, 99=nothing
        if (replace_this is False) : return None   # 99=color not found: drawing not possible -> so exiting
    else :
        #if this is a new color: overwrite a color
        if (color != set_pixel_get_color_by_index(my_block, user_replace_this) ) :
            flag_new_colors = True
        replace_this = user_replace_this
    
    #check if old and new bitmap matrices differ
    if (set_pixel_get_index_at_pixel(my_block, posx, posy) != replace_this) : flag_new_bitmap = True

    #exit if colors or bitmap are not new
    if (flag_new_colors == False) & (flag_new_bitmap == False) : return None

    # update colors and bitmap
    undo_save();
    if (flag_new_colors == True) : set_pixel_replace_colors(my_block, replace_this, color) # replace bg, screen or colorram
    if (flag_new_bitmap == True) : set_pixel_replace_bitmap(my_block, posx, posy, replace_this)   #update koala bitmap data
    
    # update preview
    if ( user_replace_this == 0):
        koala_to_image()    #background is changed: convert whole koala to image again
    else :
        koala_to_image_single_block(block_x, block_y)   #update preview image only for this block (faster than converting whole koala to image again)

    action_image_refresh_prepare()
    update_infos()




def set_pixel__dye_mode(posx, posy, color):
    undo_save_already_done = False
    my_block = block_y*C64_CHAR_WIDTH+block_x
    user_replace_this = user_replace_color.get()    #0 = background, 1=screen1, 2=screen2, 3=colorram, 99=nothing

    replace_this = set_pixel_get_index_at_pixel(my_block, posx, posy)

    if (color == set_pixel_get_color_by_index(my_block, replace_this)) : return None

    # update colors
    undo_save();
    set_pixel_replace_colors(my_block, replace_this, color) # replace bg, screen or colorram
    
    # update preview
    if ( replace_this == 0):
        koala_to_image()    #background is changed: convert whole koala to image again
    else :
        koala_to_image_single_block(block_x, block_y)   #update preview image only for this block (faster than converting whole koala to image again)

    action_image_refresh_prepare()
    update_infos()




def set_pixel_get_index_at_pixel(my_block, x,y) :
    # find out what (bg, screen1, screen2 or colram) this color uses
    SHIFT_RIGHT = (
        6,  #0
        4,  #1
        2,  #2
        0   #3
    )

    bitmap_position_y = (my_block*8)+ (y & 0b00000111)
    bitmap_position_x = x & 0b00000011 #only 0-3
    return (koala_bitmap[bitmap_position_y] >> SHIFT_RIGHT[bitmap_position_x]) & 0b00000011 #only 0-3
    

def set_pixel_color_is_used_in_block(my_block, color_type):
    for y in range (0,8) :
        for x in range (0,4) :
            if (color_type == set_pixel_get_index_at_pixel(my_block, x,y)) :
                return True
    # not found
    return False



def set_pixel_fill_used_array(my_block):
    my_type = (
        1,  #screen1
        2,  #screen2
        3   #colram
    )
    
    used = []
    
    for col in my_type :
        used.append(set_pixel_color_is_used_in_block(my_block, col))

    return used





def set_pixel__keep_mode(okay_to_overwrite, posx, posy, color):
    global user_replace_color
    undo_save_already_done = False

    my_block = block_y*C64_CHAR_WIDTH+block_x

    flag_new_colors = False
    flag_new_bitmap = False

    used_array = set_pixel_fill_used_array(my_block)
    
    used_colors = 0
    for a in used_array :
        if (a == True): used_colors += 1
    
    index_here = set_pixel_get_index_at_pixel(my_block, posx ,posy)
    index_new = set_pixel_get_best_index_for_color(my_block, color)   #0 = background, 1=screen1, 2=screen2, 3=colorram, 99=nothing

#    print("")
#    print("index_new=",index_new)
    if (index_new is False) :
        #print ("no matching color found:")

        if (used_colors > 2) :
            #print ("-too many colours:")
            
            if ( okay_to_overwrite == False ) :
                #print ("--overwriting color not allowed: giving up")
                return None
                
            else :
                #print ("--just overwriting color")
                # find out what (bg, screen1, screen2 or colram) this color uses
                user_replace_color.set(index_here)
                if (index_here == 0) :
                    #print("11 not replacing background color!")
                    return None
                else :
                    #print ("---index here=",index_here," / color=",color)
                    flag_new_colors = True
                    index_new = index_here

                    #update preview image only for this block (faster than converting whole koala to image again)
#                    pos = block_y * 8 * 160 + (block_x * 4)
#                    set_pixel_update_preview_block(pos, old_color, color)   #replace all pixels with old_color with color in this block

        else :
            # no matching color found, so reorganize bitmap and add a new color
            #print ("-reorganize bitmap and add a new color")
            
            for a in range(0,len(used_array)) :
                if (used_array[a] == False) : 
                    break
            a += 1        
#            print('free color at ',a)
            flag_new_colors = True
            flag_new_bitmap = True
            index_new = a
    else :
        #print ("matching color found")
        if (index_new == index_here) : return None     #same color. nothing to do.
        #print ("- just update bitmap")
        flag_new_bitmap = True



    if ((flag_new_colors == False) & (flag_new_bitmap == False)) :
        #print ("Nothing to do")
        return None

    undo_save();
    if (flag_new_colors == True): set_pixel_replace_colors(my_block, index_new, color) # replace bg, screen or colorram
    if (flag_new_bitmap == True): set_pixel_replace_bitmap(my_block, posx, posy ,index_new)
    
    #update preview
    koala_to_image_single_block(block_x, block_y)   #update preview image only for this block (faster than converting whole koala to image again)
    action_image_refresh_prepare()
    update_infos()



        


def input_mouse_left_button_preview(event):
    global mouse_posx, mouse_posy
    mouse_posx, mouse_posy = event.x, event.y
    update_infos_preview()
    zoom_perform()
    action_image_refresh_show()


def input_mouse_left_button_editor(event):
    global mouse_posx, mouse_posy
    mouse_posx, mouse_posy = event.x, event.y
    update_infos()
    
    if (editor_mode == 'marker_start') :
        marker_start()
        return None

    if (editor_mode == 'marker_end') :
        marker_end()
        return None
        
    if (editor_mode == 'edit') :
        set_pixel__left(cursorx_variable.get(), cursory_variable.get(), user_drawcolor_left.get())


def input_mouse_right_button(event):
    global mouse_posx, mouse_posy
    mouse_posx, mouse_posy = event.x, event.y
    update_infos()
    set_pixel__right(cursorx_variable.get(), cursory_variable.get(), user_drawcolor_right.get())


def input_mouse_middle_button_release(event):
    global label_editor_image
    label_editor_image.config(cursor=CURSOR_EDIT)
    
def input_mouse_middle_button_press(event):
    global block_x_absolute, block_y_absolute
    global label_editor_image
    
    label_editor_image.config(cursor=CURSOR_MOVE)

    factor_x = GRID_SIZE[zoom]/EDITORSIZE_DIV_X[user_editorsize.get()]
    factor_y = GRID_SIZE[zoom]/EDITORSIZE_DIV_Y[user_editorsize.get()]
 
    block_x_absolute = int( (mouse_posx/factor_x/BITMAP_PIXEL_X) )
    block_y_absolute = int( (mouse_posy/factor_y/BITMAP_PIXEL_Y) )


def input_mouse_middle_button_motion(event):
    global mouse_posx, mouse_posy
    global editorimage_posx, editorimage_posy
    global block_x_absolute, block_y_absolute

    mouse_posx, mouse_posy = event.x, event.y
    update_infos()
    
    old_x = block_x_absolute
    old_y = block_y_absolute

    factor_x = GRID_SIZE[zoom]/EDITORSIZE_DIV_X[user_editorsize.get()]
    factor_y = GRID_SIZE[zoom]/EDITORSIZE_DIV_Y[user_editorsize.get()]
 
    block_x_absolute = int( (mouse_posx/factor_x/BITMAP_PIXEL_X) )
    block_y_absolute = int( (mouse_posy/factor_y/BITMAP_PIXEL_Y) )
  
    diff_x = old_x - block_x_absolute
    diff_y = old_y - block_y_absolute
    

    if (
        (abs(diff_x) != 0) |
        (abs(diff_y) != 0)
    ) :
        editorimage_posx += diff_x
        editorimage_posy += diff_y
        action_image_refresh_show()
        

    return None
    




def zoom_perform() :
    global editorimage_posx, editorimage_posy

    zoom_center_x = block_x
    zoom_center_y = block_y

    if (zoom==0) :
        editorimage_posx = int( zoom_center_x- C64_CHAR_WIDTH/1 )
        editorimage_posy = int( zoom_center_y- C64_CHAR_HEIGHT/1 )
    if (zoom==1) :
        editorimage_posx = int( zoom_center_x- C64_CHAR_WIDTH/2 )
        editorimage_posy = int( zoom_center_y- C64_CHAR_HEIGHT/2 )
    if (zoom==2) :
        editorimage_posx = int( zoom_center_x- C64_CHAR_WIDTH/4 )
        editorimage_posy = int( zoom_center_y- C64_CHAR_HEIGHT/4 )
    if (zoom==3) :
        editorimage_posx = int( zoom_center_x- C64_CHAR_WIDTH/8 )
        editorimage_posy = int( zoom_center_y- C64_CHAR_HEIGHT/8 )
    if (zoom==4) :
        editorimage_posx = int( zoom_center_x- C64_CHAR_WIDTH/16 )
        editorimage_posy = int( zoom_center_y- C64_CHAR_HEIGHT/16 )

    action_image_refresh_prepare()
    #print("zoom=",zoom)
    #print("block_x=",block_x," block_y=",block_y, "editorimage_posx=",editorimage_posx," editorimage_posy=",editorimage_posy)
    update_infos()


def zoom_in(self) :
    global zoom
    if (zoom < 4) :
        zoom += 1
        zoom_perform()


def zoom_out(self) :
    global zoom
    if (zoom > 0) :
        zoom -= 1
        zoom_perform()



def input_mouse_wheel(event):
    if (
        (event.num == 5) |
        (int(event.delta / 120) == -1) |
        (event.delta == -1)
    ) :
        #mouse wheel down
        zoom_out(0)

    if (
        (event.num == 4) |
        (int(event.delta / 120) == 1) |
        (event.delta == 1)
    ) :
        #mouse wheel up
        zoom_in(0)


#https://stackoverflow.com/questions/48210090/how-to-use-bundled-program-after-pyinstaller-add-binary
def resource_path(relative_path):
    #Get absolute path to resource, works for dev and for PyInstaller
    base_path = getattr(sys, '_MEIPASS', os.path.dirname(os.path.abspath(__file__)))
    return os.path.join(base_path, relative_path)
    

def action_OpenFile_from_menu():
    action_OpenFile(None)
    
def action_OpenFile(self):
    ftypes = [('Image Files', '*.koa *.kla')]
    load_filename = askopenfilename(filetypes = ftypes)
    if not load_filename : return None
    
    loadFile(load_filename)
    return None


def shorten_filename (filename) :
    if (len(current_filename) > 20) :
        return "..."+current_filename[-20:]
    else :
        return current_filename

def set_title():
    root.title(PROGNAME+" \""+shorten_filename(current_filename)+"\"")

def loadFile(filename):
    global current_filename
    global undo_stack
    
    current_filename = filename
    set_title()
    load_koala(filename)
    undo_stack = []
    update_infos()
    action_image_refresh_prepare()


def undo_save():
    global undo_stack

    my_block = block_y*C64_CHAR_WIDTH+block_x
    
    my_undo = []
    my_undo.append(block_x)
    my_undo.append(block_y)
    my_undo.append(koala_col12[my_block])
    my_undo.append(koala_col3[my_block])
    my_undo.append(koala_bitmap[ (my_block*8) : ((my_block+1)*8) ])
 
    undo_stack.append(my_undo)
    update_infos()



def undo_undo_from_menu():
    undo_undo(None)
    
def undo_undo(self):
    global undo_stack
    
    if (len(undo_stack)>0) :
        value = undo_stack.pop()

        undo_x = value[0]
        undo_y = value[1]
        undo_col12 = value[2]
        undo_col3 = value[3]
        undo_bitmap = value[4]

        my_block = undo_y*C64_CHAR_WIDTH+undo_x
        
        koala_col12[my_block] = undo_col12
        koala_col3[my_block] = undo_col3
        for y in range(0,8) :
            koala_bitmap[(my_block*8)+y] = undo_bitmap[y]
        koala_to_image_single_block(undo_x,undo_y)
        action_image_refresh_prepare()
        update_infos()



def marker_select_from_menu () :
    marker_select(None)

def marker_select(self):
    global editor_mode
    editor_mode = 'marker_start'
    label_editor_image.config(cursor=CURSOR_MARKER_START)


def marker_start():
    global editor_mode
    global marker_posx, marker_posy
    editor_mode = 'marker_end'
    label_editor_image.config(cursor=CURSOR_MARKER_END)
    marker_posx = block_x
    marker_posy = block_y

def marker_end():
    global editor_mode
    global marker_width, marker_height
    
    editor_mode = 'edit'
    label_editor_image.config(cursor=CURSOR_EDIT)
    
    marker_width = block_x - marker_posx
    marker_height = block_y - marker_posy
    action_image_refresh_show()


def buffer_copy_data():
    global buffer_bitmap, buffer_col12, buffer_col3
    global buffer_width, buffer_height, buffer_posx, buffer_posy
    
    buffer_posx = marker_posx
    buffer_posy = marker_posy
    buffer_width = marker_width
    buffer_height = marker_height
    
    for y in range(0, marker_height+1) :
        for x in range(0, marker_width+1) :
            block = (marker_posy+y)*C64_CHAR_WIDTH+(marker_posx+x)
            buffer_col12[block] = koala_col12[block]
            buffer_col3[block] = koala_col3[block]
            for c in range(0,8) :
                buffer_bitmap[block*8+c] = koala_bitmap[block*8+c]


def marker_reset():
    global marker_posx, marker_posy, marker_width, marker_height
    marker_posx = 0
    marker_posy = 0
    marker_width = 0
    marker_height = 0

def buffer_copy_from_menu():
    buffer_copy(None)
    
def buffer_copy(self):
    buffer_copy_data()
    marker_reset()
    koala_to_image()
    action_image_refresh_prepare()


def buffer_paste_from_menu():
    buffer_paste(None)
    
def buffer_paste(self):
    global koala_bitmap, koala_col12, koala_col3

    for y in range(0, buffer_height+1) :
        for x in range(0, buffer_width+1) :
            if (
             ((block_y+y) < C64_CHAR_HEIGHT) &
             ((block_x+x) < C64_CHAR_WIDTH)
            ) :
                block_src = (buffer_posy+y)*C64_CHAR_WIDTH+(buffer_posx+x)
                block_dst = (block_y+y)*C64_CHAR_WIDTH+(block_x+x)
                koala_col12[block_dst] = buffer_col12[block_src]
                koala_col3[block_dst] = buffer_col3[block_src]
                for c in range(0,8) :
                    koala_bitmap[block_dst*8+c] = buffer_bitmap[block_src*8+c]

    koala_to_image()
    action_image_refresh_prepare()

def buffer_cut_from_menu():
    buffer_cut(None)
    
def buffer_cut(self):
    global koala_bitmap
    
    if (
     (marker_height == 0) | (marker_width == 0)
    ) : return None
    
    buffer_copy_data()
    
    for y in range(0,marker_height+1) :
        for x in range(0,marker_width+1) :
            for c in range(0,8) :
                block = (marker_posy+y)*C64_CHAR_WIDTH+(marker_posx+x)
                koala_bitmap[block*8+c] = 0  #background color

    marker_reset()
    koala_to_image()
    action_image_refresh_prepare()



def draw_new_image():
    global current_filename
    global koala_bitmap, koala_bg, koala_col12, koala_col3

    current_filename = "new.koa"

    set_title()

    koala_bitmap=[0]*8000
    koala_col12=[0]*1000
    koala_col3=[0]*1000
    koala_bg=0

    koala_to_image()

    #create palette
    koala_image.putpalette(PALETTEDATA_COLODORE)
    koala_image.putdata(koala_colorindex_data)

    action_image_refresh_show() 



def action_SaveFile_from_menu():
    action_SaveFile(None)

def action_SaveFile(self):
    global user_filename_save
    global current_filename
    
    user_filename_save = ""

    try:
        var_start_address = int (user_start_address.get(),16)
    except ValueError:
        var_start_address = 0
    var_start_address_checkbutton = user_start_address_checkbutton.get()

    #sanity checks
    sanity_check = True
    if (
        (var_start_address > 0xffff) &
        (var_start_address_checkbutton)
    ) :
        textbox.insert(tk.END, "*** error: Start address has to be 0-65535 (2bytes).\n")
        sanity_check = False


    user_filename_save = asksaveasfilename(
     defaultextension='.koa',
     filetypes=[("koala", '*.koa')],
     initialfile=os.path.basename(current_filename),
     title="Choose filename"
    )

#     initialdir=self.default_path_to_pref,

    if not user_filename_save : return None

    #action_convert()

    #write stuff...
    file_out = open(user_filename_save , "wb")

    out_buffer = []
    
    #start address
    if var_start_address_checkbutton :
        i=var_start_address & 0xff  #low
        out_buffer.append(i)
        i=var_start_address >> 8    #high
        out_buffer.append(i)
        
    #koala data
    for i in range(0,8000):
        out_buffer.append(koala_bitmap[i])
    for i in koala_col12:
        out_buffer.append(i)
    for i in koala_col3:
        out_buffer.append(i)
    out_buffer.append(koala_bg)
    
    file_out.write(bytearray(out_buffer))
    file_out.close()
    
    current_filename = user_filename_save
    set_title()
    
    return None



def create_gui_drawmode (
	root,
    _row,
    _column
) :
    frame_border = tk.Frame(
        root,
        bg=BGCOLOR,
        bd=_bd,
    )
    frame_border.grid(
        row=_row,
        column=_column
    )
    frame_inner = tk.Frame(
        frame_border,
        bg=BGCOLOR,
        bd=1,
        padx = _padx,
        pady = _pady,
        relief=tk.RAISED
        )
    frame_inner.grid()
    frame_inner.grid_columnconfigure(0, weight=1)
    frame_inner.grid_rowconfigure(0, weight=1)

    label = tk.Label(
        frame_inner,
        bg=BGCOLOR,
        text="draw mode:",
        wraplength=100,
        anchor='c',
        justify='left',
        fg="#000088"
    )
    label.grid(
        row=0,
        column=0,
        sticky=tk.N,
        columnspan=2
    )
    MODES = [
            ("keep", "keep", 1, 0),
            ("replace", "replace", 1, 1),
            ("select", "select", 2, 0),
            ("dye", "dye", 2, 1)
        ]

    for text, mode, row, column in MODES:
        radiobutton_user_mode = tk.Radiobutton(
            frame_inner,
            bg=BGCOLOR,
            activebackground=ACTIVECOLOR,
            selectcolor=SELECTCOLOR,
            text = text,
            value = mode,
            indicatoron=0,
            variable=user_drawmode,
            cursor=CURSOR_HAND,
            command=root_refresh
        )
        radiobutton_user_mode.grid(
            row=row,
            column=column,
            sticky=tk.W+tk.E
        )


def root_refresh() :
    global frame_replace_color
    
    if (user_drawmode.get() == 'select') : 
        frame_replace_color.grid()
    else :
        frame_replace_color.grid_remove()
    
    

def create_gui_settings_editorsize (
	root,
    _row,
    _column
) :
    frame_border = tk.Frame(
        root,
        bg=BGCOLOR,
        bd=_bd,
    )
    frame_border.grid(
        row=_row,
        column=_column
    )
    frame_inner = tk.Frame(
        frame_border,
        bg=BGCOLOR,
        bd=1,
        padx = _padx,
        pady = _pady,
        relief=tk.RAISED
        )
    frame_inner.grid()
    frame_inner.grid_columnconfigure(0, weight=1)
    frame_inner.grid_rowconfigure(0, weight=1)

    _row = 0
    label = tk.Label(
        frame_inner,
        bg=BGCOLOR,
        text="editor size",
        wraplength=100,
        anchor='c',
        justify='left',
        fg="#000088"
    )
    label.grid(
        row=_row,
        column=1,
        sticky=tk.W+tk.E
    )
    MODES = [
            (EDITORSIZE_TEXT[0], 0),
            (EDITORSIZE_TEXT[1], 1)
        ]

    for text, mode in MODES:
        radiobutton = tk.Radiobutton(
            frame_inner,
            bg=BGCOLOR,
            activebackground=ACTIVECOLOR,
            selectcolor=SELECTCOLOR,
            text = text,
            value = mode,
            indicatoron=0,
            variable=user_editorsize,
            cursor=CURSOR_HAND,
            command=action_image_refresh_prepare
        )
        _row += 1
        radiobutton.grid(
            row=_row,
            column=1,
            sticky=tk.W+tk.E
        )

def create_gui_settings_previewsize (
	root,
    _row,
    _column
) :
    frame_border = tk.Frame(
        root,
        bg=BGCOLOR,
        bd=_bd,
    )
    frame_border.grid(
        row=_row,
        column=_column
    )
    frame_inner = tk.Frame(
        frame_border,
        bg=BGCOLOR,
        bd=1,
        padx = _padx,
        pady = _pady,
        relief=tk.RAISED
        )
    frame_inner.grid()
    frame_inner.grid_columnconfigure(0, weight=1)
    frame_inner.grid_rowconfigure(0, weight=1)

    _row = 0
    label = tk.Label(
        frame_inner,
        bg=BGCOLOR,
        text="preview size",
        wraplength=100,
        anchor='c',
        justify='left',
        fg="#000088"
    )
    label.grid(
        row=_row,
        column=1,
        sticky=tk.W+tk.E
    )
    MODES = [
            (PREVIEWSIZE_TEXT[0], 0),
            (PREVIEWSIZE_TEXT[1], 1)
        ]

    for text, mode in MODES:
        radiobutton = tk.Radiobutton(
            frame_inner,
            bg=BGCOLOR,
            activebackground=ACTIVECOLOR,
            selectcolor=SELECTCOLOR,
            text = text,
            value = mode,
            indicatoron=0,
            variable=user_previewsize,
            cursor=CURSOR_HAND,
            command=action_image_refresh_prepare
        )
        _row += 1
        radiobutton.grid(
            row=_row,
            column=1,
            sticky=tk.W+tk.E
        )



def create_gui_settings_palette (
	root,
    _row,
    _column
) :
#palette radiobuttons
#http://effbot.org/tkbook/radiobutton.htm
    frame_border = tk.Frame(
        root,
        bg=BGCOLOR,
        bd=_bd,
    )
    frame_border.grid(
        row=_row,
        column=_column
    )
    frame_inner = tk.Frame(
        frame_border,
        bg=BGCOLOR,
        bd=1,
        padx = _padx,
        pady = _pady,
        relief=tk.RAISED
        )
    frame_inner.grid()
    frame_inner.grid_columnconfigure(0, weight=1)
    frame_inner.grid_rowconfigure(0, weight=1)

    _row = 0
    label = tk.Label(
        frame_inner,
        bg=BGCOLOR,
        text="palette",
        wraplength=100,
        anchor='c',
        justify='left',
        fg="#000088"
    )
    label.grid(
        row=_row,
        column=1,
        sticky=tk.W+tk.E
    )
    MODES = [
            ("colodore", "colodore"),
            ("pepto", "pepto")
        ]

    for text, mode in MODES:
        radiobutton_user_mode = tk.Radiobutton(
            frame_inner,
            bg=BGCOLOR,
            activebackground=ACTIVECOLOR,
            selectcolor=SELECTCOLOR,
            text = text,
            value = mode,
            indicatoron=0,
            variable=user_palette,
            cursor=CURSOR_HAND,
            command=action_image_refresh_prepare
        )
        _row += 1
        radiobutton_user_mode.grid(
            row=_row,
            column=1,
            sticky=tk.W+tk.E
        )

        
def create_gui_pencil (
	root,
    _row,
    _column
) :
    frame_border = tk.Frame(
        root,
        bg=BGCOLOR,
        bd=_bd,
    )
    frame_border.grid(
        row=_row,
        column=_column
    )
    frame_inner = tk.Frame(
        frame_border,
        bg=BGCOLOR,
        bd=1,
        padx = _padx,
        pady = _pady,
        relief=tk.RAISED
        )
    frame_inner.grid()
    frame_inner.grid_columnconfigure(0, weight=1)
    frame_inner.grid_rowconfigure(0, weight=1)

    label = tk.Label(
        frame_inner,
        bg=BGCOLOR,
        text="pencil",
        wraplength=100,
        anchor='c',
        justify='left',
        fg="#000088"
    )
    label.grid(
        row=0,
        column=0,
        sticky=tk.W+tk.E,
        columnspan=2
    )


    MODES = [
            ("normal", "normal", 1,0),
            ("checkerboard", "checkerboard", 1,1),
            ("x-line dither", "xline", 2,0),
            ("y-line dither", "yline", 2,1),
            ("light", "light", 3,0),
        ]
        
    for text, mode, row, col in MODES:
        radiobutton_pencil = tk.Radiobutton(
            frame_inner,
            bg=BGCOLOR,
            activebackground=ACTIVECOLOR,
            selectcolor=SELECTCOLOR,
            text = text,
            value = mode,
            indicatoron=0,
            variable=user_pencil,
            cursor=CURSOR_HAND,
#            command=action_image_refresh_prepare
        )
        radiobutton_pencil.grid(
            row=row,
            column=col,
            sticky=tk.W+tk.E
        )



def create_gui_settings_startaddress (
	root,
    _row,
    _column
) :
    frame_border = tk.Frame(
        root,
        bg=BGCOLOR,
        bd=_bd,
    )
    frame_border.grid(
        row=_row,
        column=_column
    )
    frame_inner = tk.Frame(
        frame_border,
        bg=BGCOLOR,
        bd=1,
        padx = _padx,
        pady = _pady,
        relief=tk.RAISED
        )
    frame_inner.grid()
    frame_inner.grid_columnconfigure(0, weight=1)
    frame_inner.grid_rowconfigure(0, weight=1)
    
    label_start_address_title = tk.Label(
        frame_inner,
        bg=BGCOLOR,
        text="start address in hex:",
        anchor='c',
        fg="#000088"
    )
    checkbutton_start_address = tk.Checkbutton(
        frame_inner,
        bg=BGCOLOR,
        variable = user_start_address_checkbutton,
        cursor=CURSOR_HAND,
        )
    label_start_address = tk.Label(
        frame_inner,
        bg=BGCOLOR,
        text="values $0-$ffff $",
        anchor='c'
    )
    entry_start_address= tk.Entry(
        frame_inner,
        bg=TEXTBOXCOLOR,
        width=8,
        textvariable = user_start_address
    )
    
    #placement in grid layout
    label_start_address_title.grid(
        row=0,
        column=0,
        sticky=tk.W+tk.E,
        columnspan=3
    )
    checkbutton_start_address.grid(
        row=1,
        column=0,
        sticky=tk.W
    )
    label_start_address.grid(
        row=1,
        column=1,
        sticky=tk.W+tk.E
    )
    entry_start_address.grid(
        row=1,
        column=2,
        sticky=tk.E
    )







def create_gui_replace_color (
	root,
    _row,
    _column
) :
    global frame_replace_color
    global radiobutton_replace_bg, radiobutton_replace_col1, radiobutton_replace_col2, radiobutton_replace_col3

    frame_replace_color = tk.Frame(
        root,
        bg=BGCOLOR,
        bd=_bd,
    )
    frame_replace_color.grid(
        row=_row,
        column=_column
    )
    frame_inner = tk.Frame(
        frame_replace_color,
        bg=BGCOLOR,
        bd=1,
        padx = _padx,
        pady = _pady,
        relief=tk.RAISED
        )
    frame_inner.grid()
    frame_inner.grid_columnconfigure(0, weight=1)
    frame_inner.grid_rowconfigure(0, weight=1)

    

    label = tk.Label(
        frame_inner,
        bg=BGCOLOR,
        text="select mode: replace",
        anchor="c",
        justify='left',
        fg="#000088"
    )
    label.grid(
        row=0,
        column=0,
        sticky=tk.W+tk.E,
        columnspan=8
    )


    #replace color
    label_none = tk.Label(
        frame_inner,
        bg=BGCOLOR,
        text="none",
        anchor='c',
        fg="#000088"
    )
    radiobutton_used_color_none = tk.Radiobutton(
        frame_inner,
        value = 99,
        width=2,
        indicatoron=0,
        activebackground=ACTIVECOLOR,
        selectcolor=SELECTCOLOR,
        variable=user_replace_color,
        bg=BGCOLOR,
        cursor=CURSOR_HAND,
        bd=4,
        relief=tk.GROOVE,
        offrelief=tk.RAISED,
        #command=action_debug
    )

    label_replace_color = tk.Label(
        frame_inner,
        bg=BGCOLOR,
        text="color",
        anchor='c',
        fg="#000088"
    )
    
    radiobutton_replace_col1 = tk.Radiobutton(
        frame_inner,
        value = 1,
        width=2,
        indicatoron=0,
        variable=user_replace_color,
        bg=BGCOLOR,
        activebackground="#000000",
        selectcolor="#000000",
        cursor=CURSOR_HAND,
        bd=4,
        relief=tk.GROOVE,
        offrelief=tk.RAISED,
        #command=action_debug
    )
    
    radiobutton_replace_col2 = tk.Radiobutton(
        frame_inner,
        value = 2,
        width=2,
        indicatoron=0,
        variable=user_replace_color,
        bg=BGCOLOR,
        activebackground="#000000",
        selectcolor="#000000",
        cursor=CURSOR_HAND,
        bd=4,
        relief=tk.GROOVE,
        offrelief=tk.RAISED,
        #command=action_debug
    )
    
    radiobutton_replace_col3 = tk.Radiobutton(
        frame_inner,
        value = 3,
        width=2,
        indicatoron=0,
        variable=user_replace_color,
        bg=BGCOLOR,
        activebackground="#000000",
        selectcolor="#000000",
        cursor=CURSOR_HAND,
        bd=4,
        relief=tk.GROOVE,
        offrelief=tk.RAISED,
        #command=action_debug
    )
    radiobutton_replace_bg = tk.Radiobutton(
        frame_inner,
        value = 0,
        width=2,
        indicatoron=0,
        variable=user_replace_color,
        bg=BGCOLOR,
        activebackground="#000000",
        selectcolor="#000000",
        cursor=CURSOR_HAND,
        bd=4,
        relief=tk.GROOVE,
        offrelief=tk.RAISED,
        #command=action_debug
    )
    

    #placement in grid
    label_none.grid(
        row=1,
        column=0,
        sticky=tk.W+tk.E
    )
    radiobutton_used_color_none.grid(
        row=1,
        column=1,
        sticky=tk.W+tk.E,
        columnspan=4
    )

    label_replace_color.grid(
        row=2,
        column=0,
        sticky=tk.W+tk.E
    )
    radiobutton_replace_col1.grid(
        row=2,
        column=1,
        sticky=tk.W+tk.E
    )
    radiobutton_replace_col2.grid(
        row=2,
        column=2,
        sticky=tk.W+tk.E
    )
    radiobutton_replace_col3.grid(
        row=2,
        column=3,
        sticky=tk.W+tk.E
    )
    radiobutton_replace_bg.grid(
        row=2,
        column=4,
        sticky=tk.W+tk.E
    )



def create_gui_current_color (
	root,
    _row,
    _column
) :
    global radiobutton_current_bg, radiobutton_current_col1, radiobutton_current_col2, radiobutton_current_col3

    frame_border = tk.Frame(
        root,
        bd=_bd,
    )
    frame_border.configure(background=BGCOLOR)
    frame_border.grid(
        row=_row,
        column=_column
    )
    frame_inner = tk.Frame(
        frame_border,
        bd=1,
        padx = _padx,
        pady = _pady,
        relief=tk.RAISED
        )
    frame_inner.configure(background=BGCOLOR)
    frame_inner.grid()
    frame_inner.grid_columnconfigure(0, weight=1)
    frame_inner.grid_rowconfigure(0, weight=1)

    

    #current color
    label_current_color = tk.Label(
        frame_inner,
        bg=BGCOLOR,
        text="block",
        anchor='c',
        fg="#000088"
    )
    
    radiobutton_current_col1 = tk.Radiobutton(
        frame_inner,
        value = 1,
        width=2,
        indicatoron=0,
        state=tk.DISABLED,
        variable=current_color,
        background="#000000",
        activebackground="#000000",
        selectcolor="#000000",
        bd=4,
        relief=tk.GROOVE,
        offrelief=tk.RAISED,
        #command=action_debug
    )
    
    radiobutton_current_col2 = tk.Radiobutton(
        frame_inner,
        value = 2,
        width=2,
        indicatoron=0,
        state=tk.DISABLED,
        variable=current_color,
        background="#000000",
        activebackground="#000000",
        selectcolor="#000000",
        bd=4,
        relief=tk.GROOVE,
        offrelief=tk.RAISED,
        #command=action_debug
    )
    
    radiobutton_current_col3 = tk.Radiobutton(
        frame_inner,
        value = 3,
        width=2,
        indicatoron=0,
        state=tk.DISABLED,
        variable=current_color,
        background="#000000",
        activebackground="#000000",
        selectcolor="#000000",
        bd=4,
        relief=tk.GROOVE,
        offrelief=tk.RAISED,
        #command=action_debug
    )
    radiobutton_current_bg = tk.Radiobutton(
        frame_inner,
        value = 0,
        width=2,
        indicatoron=0,
        state=tk.DISABLED,
        variable=current_color,
        background="#000000",
        activebackground="#000000",
        selectcolor="#000000",
        bd=4,
        relief=tk.GROOVE,
        offrelief=tk.RAISED,
        #command=action_debug
    )



    

    #placement in grid
    label_current_color.grid(
        row=0,
        column=0,
        sticky=tk.W+tk.E
    )
    radiobutton_current_col1.grid(
        row=0,
        column=1,
        sticky=tk.W+tk.E
    )
    radiobutton_current_col2.grid(
        row=0,
        column=2,
        sticky=tk.W+tk.E
    )
    radiobutton_current_col3.grid(
        row=0,
        column=3,
        sticky=tk.W+tk.E
    )
    radiobutton_current_bg.grid(
        row=0,
        column=4,
        sticky=tk.W+tk.E
    )





def create_gui_color_left (
	root,
    _row,
    _column
) :
    frame_border = tk.Frame(
        root,
        bd=_bd,
        bg=BGCOLOR
    )
    frame_border.grid(
        row=_row,
        column=_column
    )
    frame_inner = tk.Frame(
        frame_border,
        bd=1,
        bg=BGCOLOR,
        padx = _padx,
        pady = _pady,
        relief=tk.RAISED
        )
    frame_inner.grid()
    frame_inner.grid_columnconfigure(0, weight=1)
    frame_inner.grid_rowconfigure(0, weight=1)

    _row = 0
    label = tk.Label(
        frame_inner,
        text="left",
        anchor="c",
        justify='left',
        bg=BGCOLOR,
        fg="#000088"
    )
    label.grid(
        row=_row,
        column=1,
        sticky=tk.W+tk.E,
        columnspan=8
    )

    MODES = [
            ("black", 		 0, 0,0),	#text,value,row,column
            ("white",		 1, 0,1),
            ("red",			 2, 0,2),
            ("cyan",		 3, 0,3),
            ("purple",		 4, 0,4),
            ("green",		 5, 0,5),
            ("blue",		 6, 0,6),
            ("yellow",		 7, 0,7),
            ("orange",		 8, 1,0),
            ("brown",		 9, 1,1),
            ("light red",	10, 1,2),
            ("dark gray",	11, 1,3),
            ("gray", 		12, 1,4),
            ("light green",	13, 1,5),
            ("light blue",	14, 1,6),
            ("light gray",	15, 1,7),
    ]

    for text, value, my_row, my_column in MODES:
        mycolor = '#%02x%02x%02x' % (
            PALETTEDATA_PEPTO[(value*3)+0],
            PALETTEDATA_PEPTO[(value*3)+1],
            PALETTEDATA_PEPTO[(value*3)+2]
        )
        radiobutton_user_value = tk.Radiobutton(
            frame_inner,
            value = value,
            width=2,
            indicatoron=0,
            variable=user_drawcolor_left,
            background=mycolor,
            activebackground=mycolor,
            selectcolor=mycolor,
            cursor=CURSOR_HAND,
            bd=4,
            relief=tk.GROOVE,
            offrelief=tk.RAISED,
            #command=action_debug
        )
        radiobutton_user_value.grid(
            row=2+my_row,
            column=my_column,
            sticky=tk.W+tk.E
        )

def create_gui_color_right (
	root,
    _row,
    _column
) :
    frame_border = tk.Frame(
        root,
        bd=_bd,
    )
    frame_border.configure(background=BGCOLOR)
    frame_border.grid(
        row=_row,
        column=_column
    )
    frame_inner = tk.Frame(
        frame_border,
        bd=1,
        bg=BGCOLOR,
        padx = _padx,
        pady = _pady,
        relief=tk.RAISED
        )
    frame_inner.grid()
    frame_inner.grid_columnconfigure(0, weight=1)
    frame_inner.grid_rowconfigure(0, weight=1)

    _row = 0
    label = tk.Label(
        frame_inner,
        bg=BGCOLOR,
        text="right",
        anchor="c",
        justify='left',
        fg="#000088"
    )
    label.grid(
        row=_row,
        column=1,
        sticky=tk.W+tk.E,
        columnspan=8
    )

    MODES = [
            ("black", 		 0, 0,0),	#text,value,row,column
            ("white",		 1, 0,1),
            ("red",			 2, 0,2),
            ("cyan",		 3, 0,3),
            ("purple",		 4, 0,4),
            ("green",		 5, 0,5),
            ("blue",		 6, 0,6),
            ("yellow",		 7, 0,7),
            ("orange",		 8, 1,0),
            ("brown",		 9, 1,1),
            ("light red",	10, 1,2),
            ("dark gray",	11, 1,3),
            ("gray", 		12, 1,4),
            ("light green",	13, 1,5),
            ("light blue",	14, 1,6),
            ("light gray",	15, 1,7),
    ]

    for text, value, my_row, my_column in MODES:
        mycolor = '#%02x%02x%02x' % (
            PALETTEDATA_PEPTO[(value*3)+0],
            PALETTEDATA_PEPTO[(value*3)+1],
            PALETTEDATA_PEPTO[(value*3)+2]
        )
        radiobutton_user_value = tk.Radiobutton(
            frame_inner,
            value = value,
            width=2,
            indicatoron=0,
            variable=user_drawcolor_right,
            background=mycolor,
            activebackground=mycolor,
            selectcolor=mycolor,
            cursor=CURSOR_HAND,
            bd=4,
            relief=tk.GROOVE,
            offrelief=tk.RAISED,
            #command=action_convert
        )
        radiobutton_user_value.grid(
            row=2+my_row,
            column=my_column,
            sticky=tk.W+tk.E
        )




def create_gui_about () :
    _padx = 10
    _pady = 10
    
	#http://effbot.org/tkbook/toplevel.htm
    about_window = tk.Toplevel(
        bd=10
    )
    about_window.title("About")
    about_window.iconphoto(False, tk.PhotoImage(data=icon_graphic))
    about_window.configure(background=BGCOLOR)

    msg_text = """\
This is %s
Version %s [%s]
by fieserWolF / Abyss-Connection

For feature requests or bug reports
feel free to contact me:
http://csdb.dk/scener/?id=3623
wolf@abyss-connection.de

I know this is far from being complete,
so look out for new versions!

wolf


MegaPixel - multicolor bitmap editor for Commodore 64
Copyright (C) 2020 fieserWolF / Abyss-Connection

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.

For futher questions, please contact me at
http://csdb.dk/scener/?id=3623 or wolf@abyss-connection.de

For Python3, The Python Imaging Library (PIL), Numpy, Tcl/Tk and other used source licenses see file "LICENSE_OTHERS".\
    """ % (PROGNAME, VERSION, DATUM)

    frame_left = tk.Frame( about_window)
    frame_right = tk.Frame( about_window)

    #http://effbot.org/tkbook/message.htm
    #text
    msg = tk.Text(
        frame_right,
        bg=TEXTBOXCOLOR,
#        bd=10,
        relief=tk.FLAT,
        width=60,
        height=20
    )

    #scrollbar
    msg_scrollBar = tk.Scrollbar(
        frame_right,
        bg=BGCOLOR,
    )
    msg_scrollBar.config(command=msg.yview)
    msg.config(yscrollcommand=msg_scrollBar.set)

    #label with image
    #http://effbot.org/tkbook/photoimage.htm
    #image = Image.open("wolf.jpg")
    #photo = ImageTk.PhotoImage(image)
    photo = tk.PhotoImage(data=about_graphic)
    label_image = tk.Label(
        frame_left,
        bg=BGCOLOR,
#        bd=10,
        image=photo,
        padx=_padx,
        pady=_pady
    )
    label_image.image = photo # keep a reference!

    #button
    button = tk.Button(
        frame_left,
        bg=BGCOLOR,
        activebackground=ACTIVECOLOR,
        text="OK",
        command=about_window.destroy,
        padx=_padx,
        pady=_pady,
        cursor=CURSOR_HAND,
    )




    #placement in grid
    frame_left.grid(
        row=0,
        column=0,
        sticky=tk.W
    )
    frame_right.grid(
        row=0,
        column=1,
        sticky=tk.W
    )
    
    label_image.grid(
        row=0,
        column=0,
        sticky=tk.W
    )
    button.grid(
        row=1,
        column=0,
        sticky=tk.W+tk.E
    )

    msg.grid(
        row=0,
        column=0,
        sticky=tk.W
    )
    msg_scrollBar.grid(
        row=0,
        column=1,
        sticky=tk.N+tk.S
    )



    msg.insert(tk.END, msg_text)
    msg.config(state=tk.DISABLED)




def create_gui_help_from_menu () :
    create_gui_help(None)
    
def create_gui_help (self) :
    _padx = 10
    _pady = 10
    
	#http://effbot.org/tkbook/toplevel.htm
    help_window = tk.Toplevel(
        bd=10
    )
    help_window.title("Help")
    help_window.iconphoto(False, tk.PhotoImage(data=icon_graphic))
    help_window.configure(background=BGCOLOR)
    
    msg_text = """\
GUI controls
------------
Alt+q = quit MegaPixel
Alt+o = open file
Alt+s = save file
Alt+c = configure
Alt+p = show preview window
Alt+h = this help

mouse control
-------------
right mouse button = set color
left mouse button = set other color
middle mouse button = scroll image
mouse wheel = zoom in and out

editing
-------
Ctrl+z = undo (single pixel editing only, not for block-commands like cut or paste)
Ctrl+x = cut
Ctrl+c = copy
Ctrl+p = paste
m = set marker
Alt+n = normal pencil
Alt+b = checkerboard dither pencil
Alt+x = x-line dither pencil
Alt+y = y-line dither pencil
Alt+l = light dither pencil

editor visuals
--------------
plus/ minus = zoom in and out
cursor keys = scroll image

left mouse-button color
-----------------------
0-9...a-f = select color
F1 = screen-color-1 of block
F2 = screen-color-2 of block
F3 = colorram of block
F4 = background

right mouse-button color
------------------------
Shift+ 0-9...a-f = select color
Shift+F1 = screen-color-1 of block
Shift+F2 = screen-color-2 of block
Shift+F3 = colorram of block
Shift+F4 = background

color to replace (only when in draw mode 'select'):
---------------------------------------------------
F5 = screen-color-1 of block
F6 = screen-color-2 of block
F7 = colorram of block
F8 = background
Space = no overwriting

notes: draw-modes
-----------------
Can be set in settings window.
Behaviour if too many colors are used (color-clash):
- keep color    = keep color if too many colors are used
- replace color = replace color if too many colors are used
- select color  = overwrite selected data: screen-color1, screen-color2, colorram or background
- dye  = do not touch bitmap, only overwrite color
\
    """

    frame_left = tk.Frame( help_window)
    frame_right = tk.Frame( help_window)

    #http://effbot.org/tkbook/message.htm
    #text
    msg = tk.Text(
        frame_right,
        bg=TEXTBOXCOLOR,
        relief=tk.FLAT,
        width=60,
        height=20
    )

    #scrollbar
    msg_scrollBar = tk.Scrollbar(
        frame_right
    )
    msg_scrollBar.config(command=msg.yview)
    msg.config(yscrollcommand=msg_scrollBar.set)

    #label with image
    #http://effbot.org/tkbook/photoimage.htm
    #image = Image.open("wolf.jpg")
    #photo = ImageTk.PhotoImage(image)
    photo = tk.PhotoImage(data=about_graphic)
    label_image = tk.Label(
        frame_left,
        bg=BGCOLOR,
#        bd=10,
        image=photo,
        padx=_padx,
        pady=_pady
    )
    label_image.image = photo # keep a reference!

    #button
    button = tk.Button(
        frame_left,
        bg=BGCOLOR,
        activebackground=ACTIVECOLOR,
        text="OK",
        command=help_window.destroy,
        padx=_padx,
        pady=_pady,
        cursor=CURSOR_HAND,
    )




    #placement in grid
    frame_left.grid(
        row=0,
        column=0,
        sticky=tk.W
    )
    frame_right.grid(
        row=0,
        column=1,
        sticky=tk.W
    )
    
    label_image.grid(
        row=0,
        column=0,
        sticky=tk.W
    )
    button.grid(
        row=1,
        column=0,
        sticky=tk.W+tk.E
    )

    msg.grid(
        row=0,
        column=0,
        sticky=tk.W
    )
    msg_scrollBar.grid(
        row=0,
        column=1,
        sticky=tk.N+tk.S
    )



    msg.insert(tk.END, msg_text)
    msg.config(state=tk.DISABLED)

    return None




def create_gui_settings_from_menu () :
    create_gui_settings(None)
    
def create_gui_settings (self) :
    _padx = 10
    _pady = 10
    
	#http://effbot.org/tkbook/toplevel.htm
    config_window = tk.Toplevel(
        bd=10
    )
    config_window.title("Configure Settings")
    config_window.iconphoto(False, tk.PhotoImage(data=icon_graphic))
    config_window.configure(background=BGCOLOR)

    create_gui_settings_palette(
        config_window,
        0,  #row
        0   #column
    )

    create_gui_settings_startaddress(
        config_window,
        1,  #row
        0   #column
    )


    create_gui_settings_editorsize(
        config_window,
        0,  #row
        1   #column
    )

    create_gui_settings_previewsize(
        config_window,
        1,  #row
        1   #column
    )

    #button
    button = tk.Button(
        config_window,
        text="OK",
        bg=BGCOLOR,
        activebackground=ACTIVECOLOR,
        command=config_window.destroy,
        padx=_padx,
        pady=_pady,
        cursor=CURSOR_HAND,
    )
    button.grid(
        row=2,
        column=0,
        sticky=tk.N,
        columnspan=2
    )

    



def create_gui_preview_image_from_menu () :
    create_gui_preview_image(None)
    

def preview_window_on_closing():
    global preview_window
    global preview_window_open
    
    if (preview_window_open == True) :
        preview_window.destroy()
        preview_window_open = False
    
    
def create_gui_preview_image (self) :
    global label_preview_image
    global preview_window
    global preview_window_open
    
    if (preview_window_open == True) :
        return None
        
    preview_window = tk.Toplevel(bd=10)
    preview_window.title("preview")
    preview_window.protocol("WM_DELETE_WINDOW", preview_window_on_closing)
    preview_window.iconphoto(False, tk.PhotoImage(data=icon_graphic))
    preview_window.configure(background=BGCOLOR)


    label_preview_image = tk.Label(
        preview_window,
        bg=BGCOLOR
    )

    label_preview_image.grid(
        row=0,
        column=0,
        sticky=tk.W+tk.E
    )

    label_preview_image.bind('<Button-1>', input_mouse_left_button_preview)
    
    preview_window_open = True
        
    action_image_refresh_show()

    return None
	

def create_drop_down_menu (
	root
) :    
    menu = tk.Menu(root)
    root.config(menu=menu)

    filemenu = tk.Menu(menu, tearoff=0)
    filemenu.add_command(label="new", command=draw_new_image)
    filemenu.add_separator()
    filemenu.add_command(label="open...", command=action_OpenFile_from_menu, underline=0, accelerator="Alt+o")
    filemenu.add_command(label="save...", command=action_SaveFile_from_menu, underline=0, accelerator="Alt+s")
    filemenu.add_separator()
    filemenu.add_command(label="configure", command=create_gui_settings_from_menu, underline=0, accelerator="Alt+c")
    filemenu.add_command(label="show preview", command=create_gui_preview_image_from_menu, underline=0, accelerator="Alt+p")
    filemenu.add_separator()
    filemenu.add_command(label="quit", command=root.quit, underline=0, accelerator="Alt+q")

    editmenu = tk.Menu(menu, tearoff=0)
    editmenu.add_command(label="undo", command=undo_undo_from_menu, accelerator="Ctrl+z")
    editmenu.add_separator()
    editmenu.add_command(label="marker", command=marker_select_from_menu, underline=0, accelerator="m")
    editmenu.add_separator()
    editmenu.add_command(label="cut", command=buffer_cut_from_menu, accelerator="Ctrl+x")
    editmenu.add_command(label="copy", command=buffer_copy_from_menu, accelerator="Ctrl+c")
    #editmenu.add_command(label="paste", command=buffer_paste_from_menu, accelerator="Ctrl+v")

    infomenu = tk.Menu(menu, tearoff=0)
    infomenu.add_command(label="about", command=create_gui_about)
    infomenu.add_command(label="help", command=create_gui_help_from_menu, underline=0, accelerator="Alt+h")

    #add all menus
    menu.add_cascade(label="menu", menu=filemenu)
    menu.add_cascade(label="edit", menu=editmenu)
    menu.add_cascade(label="info", menu=infomenu)



def create_gui_info (
	root,
    _row,
    _column
) :
    
    frame_border = tk.Frame(
        root,
        bg=BGCOLOR,
        bd=_bd,
    )
    frame_border.grid(
        row=_row,
        column=_column
    )
    frame_inner = tk.Frame(
        frame_border,
        bg=BGCOLOR,
        bd=1,
        padx = _padx,
        pady = _pady,
        relief=tk.RAISED
        )
    frame_inner.grid()
    frame_inner.grid_columnconfigure(0, weight=1)
    frame_inner.grid_rowconfigure(0, weight=1)
    

    #cursor
    label_title_cursor = tk.Label(
        frame_inner,
        bg=BGCOLOR,
        text="position:",
        anchor='ne',
        fg="#000088"
    )
    label_cursor_posx = tk.Label(
        frame_inner,
        bg=BGCOLOR,
        textvariable = cursorx_variable,
        anchor='c'
    )
    label_cursor_posy = tk.Label(
        frame_inner,
        bg=BGCOLOR,
        textvariable = cursory_variable,
        anchor='c'
    )
    
    #block
    label_title_block = tk.Label(
        frame_inner,
        bg=BGCOLOR,
        text="block:",
        anchor='ne',
        fg="#000088"
    )
    label_block_posx = tk.Label(
        frame_inner,
        bg=BGCOLOR,
        textvariable = blockx_variable,
        anchor='c'
    )
    label_block_posy = tk.Label(
        frame_inner,
        bg=BGCOLOR,
        textvariable = blocky_variable,
        anchor='c'
    )

    #undo
    label_title_undo = tk.Label(
        frame_inner,
        bg=BGCOLOR,
        text="undo steps:",
        anchor='ne',
        fg="#000088"
    )
    label_undo = tk.Label(
        frame_inner,
        bg=BGCOLOR,
        textvariable = undo_variable,
        anchor='c'
    )

    
    #placement in grid layout
    label_title_cursor.grid(
        row=0,
        column=0,
        sticky=tk.W+tk.E
    )
    label_cursor_posx.grid(
        row=0,
        column=1,
        sticky=tk.W+tk.E
    )
    label_cursor_posy.grid(
        row=0,
        column=2,
        sticky=tk.W+tk.E
    )

    label_title_block.grid(
        row=1,
        column=0,
        sticky=tk.W+tk.E
    )
    label_block_posx.grid(
        row=1,
        column=1,
        sticky=tk.W+tk.E
    )
    label_block_posy.grid(
        row=1,
        column=2,
        sticky=tk.W+tk.E
    )


    label_title_undo.grid(
        row=2,
        column=0,
        sticky=tk.W+tk.E
    )
    label_undo.grid(
        row=2,
        column=1,
        sticky=tk.W+tk.E,
        columnspan=2
    )




def create_gui_top (
	root,
    _row,
    _column
) :
    frame_border = tk.Frame(
        root,
        bd=_bd,
        bg=BGCOLOR
    )
    frame_border.grid(
        row=_row,
        column=_column
    )

    photo = tk.PhotoImage(data=logo_graphic)
    label_logo = tk.Label(frame_border, image = photo)
    label_logo.image = photo # keep a reference!
    label_logo.grid( row=0, column=0)
    label_logo.configure(background=BGCOLOR)



def create_gui_editor_image (
	root,
    _row,
    _column
) :
    global label_editor_image
    
    #creation of elements
    label_editor_image = tk.Label(
        root,
        bg=BGCOLOR,
        cursor=CURSOR_EDIT,
    )
    
    #placement in grid layout
    label_editor_image.grid(
        row=0,
        column=0,
        padx=0,
        pady=0,
        ipadx=0,
        ipady=0
    )


    # mouse wheel
    #   (Windows)
    label_editor_image.bind('<MouseWheel>' ,input_mouse_wheel)
    #   (Linux)
    label_editor_image.bind('<Button-4>' ,input_mouse_wheel)
    label_editor_image.bind('<Button-5>' ,input_mouse_wheel)
    # mouse wheel-button
    label_editor_image.bind('<Motion>', input_mouse_motion_edit_window)
    # mouse buttons
    label_editor_image.bind('<Button-1>', input_mouse_left_button_editor)
    label_editor_image.bind('<B1-Motion>', input_mouse_left_button_editor)

    #https://docs.python.org/3/library/platform.html
    #platform.system() : 'Linux', 'Darwin', 'Java', 'Windows'
    if (operating_system == 'Darwin') :
        #darwin macos
        label_editor_image.bind('<Button-3>', input_mouse_middle_button_press)
        label_editor_image.bind('<ButtonRelease-3>', input_mouse_middle_button_release)
        label_editor_image.bind('<B3-Motion>', input_mouse_middle_button_motion)
        label_editor_image.bind('<Button-2>', input_mouse_right_button)
        label_editor_image.bind('<B2-Motion>', input_mouse_right_button)
    else :
        #linux and windows
        label_editor_image.bind('<Button-2>', input_mouse_middle_button_press)
        label_editor_image.bind('<ButtonRelease-2>', input_mouse_middle_button_release)
        label_editor_image.bind('<B2-Motion>', input_mouse_middle_button_motion)
        label_editor_image.bind('<Button-3>', input_mouse_right_button)
        label_editor_image.bind('<B3-Motion>', input_mouse_right_button)



def user_set_drawcolor_left(number):
    if (number==0) : user_drawcolor_left.set(used_color_bg.get()); return None
    if (number==1) : user_drawcolor_left.set(used_color_col1.get()); return None
    if (number==2) : user_drawcolor_left.set(used_color_col2.get()); return None
    if (number==3) : user_drawcolor_left.set(used_color_col3.get()); return None

def user_set_drawcolor_right(number):
    if (number==0) : user_drawcolor_right.set(used_color_bg.get()); return None
    if (number==1) : user_drawcolor_right.set(used_color_col1.get()); return None
    if (number==2) : user_drawcolor_right.set(used_color_col2.get()); return None
    if (number==3) : user_drawcolor_right.set(used_color_col3.get()); return None

def keyboard_alt_n(self):
    user_pencil.set("normal")
def keyboard_alt_b(self):
    user_pencil.set("checkerboard")
def keyboard_alt_x(self):
    user_pencil.set("xline")
def keyboard_alt_y(self):
    user_pencil.set("yline")
def keyboard_alt_l(self):
    user_pencil.set("light")
def keyboard_shift_f1(self):
    user_set_drawcolor_right(1)
def keyboard_shift_f2(self):
    user_set_drawcolor_right(2)
def keyboard_shift_f3(self):
    user_set_drawcolor_right(3)
def keyboard_shift_f4(self):
    user_set_drawcolor_right(0)

def keyboard_shift_f5(self):
    user_replace_color.set(1)
def keyboard_shift_f6(self):
    user_replace_color.set(2)
def keyboard_shift_f7(self):
    user_replace_color.set(3)
def keyboard_shift_f8(self):
    user_replace_color.set(0)



#keyboard shortcuts
def keyboard_quit(self):
    root.quit()
#def keyboard_space(self):
#    global space_pressed
#    if (str(my_focus) == ".!frame.!frame.!frame.!label2") :
#        space_pressed = True
#        #print("space")

def scroll_right(self):
    global editorimage_posx
    editorimage_posx -= 1
    action_image_refresh_show()
    update_infos()
def scroll_left(self):
    global editorimage_posx
    editorimage_posx += 1
    action_image_refresh_show()
    update_infos()
def scroll_down(self):
    global editorimage_posy
    editorimage_posy -= 1
    action_image_refresh_show()
    update_infos()
def scroll_up(self):
    global editorimage_posy
    editorimage_posy += 1
    action_image_refresh_show()
    update_infos()

def keyboard_all(event):
    switcher = {
        'm' : (marker_select,0),
        'space' : (user_replace_color.set,99),
        'F1' : (user_set_drawcolor_left,1),
        'F2' : (user_set_drawcolor_left,2),
        'F3' : (user_set_drawcolor_left,3),
        'F4' : (user_set_drawcolor_left,0),
        'F5' : (user_replace_color.set,1),
        'F6' : (user_replace_color.set,2),
        'F7' : (user_replace_color.set,3),
        'F8' : (user_replace_color.set,0),
        '0' : (user_drawcolor_left.set,0),
        '1' : (user_drawcolor_left.set,1),
        '2' : (user_drawcolor_left.set,2),
        '3' : (user_drawcolor_left.set,3),
        '4' : (user_drawcolor_left.set,4),
        '5' : (user_drawcolor_left.set,5),
        '6' : (user_drawcolor_left.set,6),
        '7' : (user_drawcolor_left.set,7),
        '8' : (user_drawcolor_left.set,8),
        '9' : (user_drawcolor_left.set,9),
        'a' : (user_drawcolor_left.set,10),
        'b' : (user_drawcolor_left.set,11),
        'c' : (user_drawcolor_left.set,12),
        'd' : (user_drawcolor_left.set,13),
        'e' : (user_drawcolor_left.set,14),
        'f' : (user_drawcolor_left.set,15),
        'equal' : (user_drawcolor_right.set,0),
        'exclam' : (user_drawcolor_right.set,1),
        'quotedbl' : (user_drawcolor_right.set,2),
        'section' : (user_drawcolor_right.set,3),
        'dollar' : (user_drawcolor_right.set,4),
        'percent' : (user_drawcolor_right.set,5),
        'ampersand' : (user_drawcolor_right.set,6),
        'slash' : (user_drawcolor_right.set,7),
        'parenleft' : (user_drawcolor_right.set,8),
        'parenright' : (user_drawcolor_right.set,9),
        'A' : (user_drawcolor_right.set,10),
        'B' : (user_drawcolor_right.set,11),
        'C' : (user_drawcolor_right.set,12),
        'D' : (user_drawcolor_right.set,13),
        'E' : (user_drawcolor_right.set,14),
        'F' : (user_drawcolor_right.set,15),
        'minus' : (zoom_out,0),
        'plus' : (zoom_in,0),
        'Left' : (scroll_right,0),
        'Right' : (scroll_left,0),
        'Up' : (scroll_down,0),
        'Down' : (scroll_up,0),
    }
    
    val = switcher.get(event.keysym)

    #if (val == None) : print ('unknown key: char=\"'+event.char+'\" keysym=\"'+event.keysym+'\" num=\"'+event.num+'\"')
    if (val != None) : val[0](val[1])
    


def create_gui_main ():
    frame_top = tk.Frame(root, bg=BGCOLOR)
    frame_top.grid(
        row=0,
        column=0,
        padx=0,
        pady=0,
        ipadx=0,
        ipady=0,
    )
    frame_top.grid_columnconfigure(0, weight=1)
    frame_top.grid_rowconfigure(0, weight=1)

    #frame_top elements
    create_gui_top(
        frame_top,
        0,
        0
    )



    frame_bottom = tk.Frame(root, bg=BGCOLOR)
    frame_bottom.grid(
        row=1,
        column=0,
        sticky=tk.N,
        padx=0,
        pady=0,
        ipadx=0,
        ipady=0,
    )
    frame_bottom.grid_columnconfigure(0, weight=1)
    frame_bottom.grid_rowconfigure(0, weight=1)

    frame_left = tk.Frame(frame_bottom, bg=BGCOLOR)
    frame_left.grid(
        row=0,
        column=0,
        sticky=tk.N,
        padx=0,
        pady=0,
        ipadx=0,
        ipady=0,

    )
    frame_left.grid_columnconfigure(0, weight=0)
    frame_left.grid_rowconfigure(0, weight=0)

    frame_right = tk.Frame(frame_bottom, bg=BGCOLOR)
    frame_right.grid(
        row=0,
        column=1,
        sticky=tk.N,
        padx=0,
        pady=0,
        ipadx=0,
        ipady=0,
    )
    frame_right.grid_columnconfigure(0, weight=1)
    frame_right.grid_rowconfigure(0, weight=1)

    #frame_left elements
    create_gui_editor_image(
        frame_left,
        0,
        0
    )

    #frame_right elements

    create_gui_drawmode(
        frame_right,
        0,  #row
        0   #column
    )

    create_gui_replace_color(
        frame_right,
        1,  #row
        0   #column
    )


    create_gui_pencil(
        frame_right,
        2,  #row
        0   #column
    )

    create_gui_current_color(
        frame_right,
        3,  #row
        0   #column
    )

    create_gui_color_left(
        frame_right,
        4,  #row
        0   #column
    )

    create_gui_color_right(
        frame_right,
        5,  #row
        0   #column
    )

    create_gui_info (
        frame_right,
        6,  #row
        0   #column
    )
    

def _main_procedure() :
    print("%s v%s [%s] *** by WolF"% (PROGNAME, VERSION, DATUM))

    root.configure(background=BGCOLOR)
    root.grid_columnconfigure(0, weight=10)
    root.grid_rowconfigure(0, weight=10)
    set_title()
    root.iconphoto(False, tk.PhotoImage(data=icon_graphic))


    create_drop_down_menu(root)
    create_gui_main()
    create_gui_preview_image(None)

    root.config(cursor=CURSOR_NOTHING)

    root.bind_all("<Key>", keyboard_all)
    root.bind_all("<Alt_L><q>", keyboard_quit)
    root.bind_all("<Alt_L><o>", action_OpenFile)
    root.bind_all("<Alt_L><s>", action_SaveFile)
    root.bind_all("<Alt_L><c>", create_gui_settings)
    root.bind_all("<Alt_L><p>", create_gui_preview_image)
    root.bind_all("<Alt_L><h>", create_gui_help)
    root.bind_all("<Control-c>", buffer_copy)
    root.bind_all("<Control-v>", buffer_paste)
    root.bind_all("<Control-x>", buffer_cut)
    root.bind_all("<Control-z>", undo_undo)
    root.bind_all("<Shift-F1>", keyboard_shift_f1)
    root.bind_all("<Shift-F2>", keyboard_shift_f2)
    root.bind_all("<Shift-F3>", keyboard_shift_f3)
    root.bind_all("<Shift-F4>", keyboard_shift_f4)
    root.bind_all("<Alt-n>", keyboard_alt_n)
    root.bind_all("<Alt-b>", keyboard_alt_b)
    root.bind_all("<Alt-x>", keyboard_alt_x)
    root.bind_all("<Alt-y>", keyboard_alt_y)
    root.bind_all("<Alt-l>", keyboard_alt_l)

    draw_grids()
    draw_background()
    
    if (len(sys.argv) == 2) :
        loadFile(sys.argv[1])
    else :
        #loadFile(resource_path('new.koa'))
        draw_new_image()
        
    root_refresh()
    tk.mainloop()



if __name__ == '__main__':
    _main_procedure()
